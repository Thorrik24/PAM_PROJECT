# Generated by Django 4.2.6 on 2023-12-08 20:42

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Carta',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre', models.CharField(max_length=150)),
                ('descripcion', models.CharField(max_length=150)),
                ('coste', models.PositiveIntegerField(blank=True)),
                ('tipo', models.CharField(choices=[('Pokemon', 'Pokemon'), ('Ataque', 'Ataque'), ('Equipo', 'Equipo'), ('Apoyo', 'Apoyo')], default='Pokemon', max_length=10)),
            ],
        ),
        migrations.CreateModel(
            name='Apoyo',
            fields=[
                ('carta_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='PAM_APP.carta')),
                ('tipo_apoyo', models.CharField(choices=[('MT', 'MT'), ('MO', 'Mo'), ('Ev', 'Evento')], max_length=6)),
            ],
            bases=('PAM_APP.carta',),
        ),
        migrations.CreateModel(
            name='Ataque',
            fields=[
                ('carta_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='PAM_APP.carta')),
                ('CaraAtaque', models.CharField(choices=[('A', 'Ataque A'), ('B', 'Ataque B')], max_length=3)),
            ],
            bases=('PAM_APP.carta',),
        ),
        migrations.CreateModel(
            name='Equipo',
            fields=[
                ('carta_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='PAM_APP.carta')),
                ('TipoEquipo', models.CharField(choices=[('O', 'Objeto de batalla'), ('S', 'Piedras'), ('B', 'Bayas')], max_length=15)),
            ],
            bases=('PAM_APP.carta',),
        ),
        migrations.CreateModel(
            name='Pokemon',
            fields=[
                ('carta_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='PAM_APP.carta')),
                ('etapa', models.CharField(choices=[('INI', 'inicial'), ('INT', 'intermedia'), ('AVA', 'avanzado')], max_length=50)),
                ('tipo_1', models.CharField(choices=[('A', 'Acero'), ('W', 'Agua'), ('B', 'Bicho'), ('D', 'Dragon'), ('E', 'Eléctrico'), ('G', 'Fantasma'), ('F', 'Fuego'), ('H', 'Hada'), ('I', 'Hielo'), ('L', 'Lucha'), ('N', 'Normal'), ('P', 'Planta'), ('Ps', 'Psíquico'), ('R', 'Roca'), ('S', 'Siniestro'), ('T', 'Tierra'), ('V', 'Veneno'), ('Fl', 'Volador')], max_length=50)),
                ('tipo_2', models.CharField(blank=True, choices=[('A', 'Acero'), ('W', 'Agua'), ('B', 'Bicho'), ('D', 'Dragon'), ('E', 'Eléctrico'), ('G', 'Fantasma'), ('F', 'Fuego'), ('H', 'Hada'), ('I', 'Hielo'), ('L', 'Lucha'), ('N', 'Normal'), ('P', 'Planta'), ('Ps', 'Psíquico'), ('R', 'Roca'), ('S', 'Siniestro'), ('T', 'Tierra'), ('V', 'Veneno'), ('Fl', 'Volador')], max_length=50, null=True)),
            ],
            bases=('PAM_APP.carta',),
        ),
        migrations.CreateModel(
            name='Usuario',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('alias', models.CharField(max_length=35)),
                ('nombre', models.CharField(max_length=60)),
                ('apellido', models.CharField(max_length=160)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Baraja',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre', models.CharField(max_length=100)),
                ('descripcion', models.CharField(max_length=100)),
                ('coste', models.PositiveIntegerField(blank=True, default=0, validators=[django.core.validators.MaxValueValidator(20)])),
                ('usuario', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Registro',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('baraja', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='PAM_APP.baraja')),
                ('ataque', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='PAM_APP.ataque')),
                ('carta', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='PAM_APP.pokemon')),
                ('equipo', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='PAM_APP.equipo')),
            ],
            options={
                'unique_together': {('baraja', 'carta')},
            },
        ),
        migrations.AddField(
            model_name='baraja',
            name='cartas',
            field=models.ManyToManyField(through='PAM_APP.Registro', to='PAM_APP.pokemon'),
        ),
        migrations.AlterUniqueTogether(
            name='baraja',
            unique_together={('usuario', 'nombre')},
        ),
    ]
